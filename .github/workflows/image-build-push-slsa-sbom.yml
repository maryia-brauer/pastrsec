name: Build And Push Docker Image
on:
  push:
    tags:
      - "v*" # triggers only if push new tag version, like `0.8.4` or else
env:
  NAME: pastrsec
  IMAGE_NAME:  ghcr.io/${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    outputs:
      image-digest: ${{ steps.container_info.outputs.image-digest }}
      image-tags: ${{ steps.container_info.outputs.image-tags }}
      image: ${{ steps.container_info.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Login to ghcr.io
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images
        run: |
          revision="$(git rev-parse "${GITHUB_REF_NAME:-HEAD}")"
          docker build \
            -t "${IMAGE_NAME}:latest" \
            -t "${IMAGE_NAME}:${GITHUB_REF_NAME}" \
            -t "${IMAGE_NAME}:${revision}" \
            --label "org.opencontainers.image.source=https://github.com/wennergr/${NAME}" \
            --label "org.opencontainers.image.created=$(date --iso-8601=seconds)" \
            --label "org.opencontainers.image.title=${NAME}" \
            --label "org.opencontainers.image.revision=${revision}" \
            --label "org.opencontainers.image.version=${GITHUB_REF_NAME}" \
            .

      - name: Publish Docker images
        run: docker push "${IMAGE_NAME}" --all-tags

      - name: Get container info
        id: container_info
        run: |
          image_digest="$(docker inspect "${IMAGE_NAME}:latest" --format '{{ index .RepoDigests 0 }}' | awk -F '@' '{ print $2 }')"
          image_tags="latest,${GITHUB_REF_NAME},$(git rev-parse "${GITHUB_REF_NAME:-HEAD}")"
          echo "::set-output name=image-digest::${image_digest}"
          echo "::set-output name=image-tags::${image_tags}"
          echo "image=${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
    
  sbom:
    runs-on: ubuntu-latest
    needs: [docker]

    permissions:
      packages: write
      id-token: write

    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.7.0

      - name: Login to ghcr.io
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach SBOM to image
        env:
          COSIGN_EXPERIMENTAL: 1
          IMAGE_DIGEST: ${{ needs.docker.outputs.image-digest }}

        run: |
          syft "${IMAGE_NAME}@${IMAGE_DIGEST}" -o spdx-json=sbom-spdx.json
          cosign attest --yes --predicate sbom-spdx.json --type spdx "${IMAGE_NAME}@${IMAGE_DIGEST}"
          echo "::notice title=Verify SBOM attestation::cosign verify-attestation ${IMAGE_NAME}@${IMAGE_DIGEST} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://spdx.dev/Document\") | .predicate.Data | fromjson'"

  # This step calls the container workflow to generate provenance and push it to
  # the container registry.
  provenance:
    needs: [docker]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.docker.outputs.image }}
      digest: ${{ needs.docker.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
